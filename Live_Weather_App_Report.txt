
# Project Report: Live Weather Application

## Abstract
This project implements a live weather application with a graphical user interface (GUI) built using Python's Tkinter library. 
The application allows users to retrieve real-time weather information for various cities using the OpenWeatherMap API, 
manage a list of cities dynamically, and save weather data in both text and HTML formats.

## Introduction
The goal of this project is to provide an easy-to-use platform for accessing live weather updates. 
With growing reliance on weather data for day-to-day planning, this application offers a straightforward solution for obtaining weather details, 
customized to the user's preferences. Users can add new cities and generate weather reports in multiple formats.

## Methodology
### Tools and Technologies Used:
1. **Programming Language**: Python
2. **GUI Framework**: Tkinter
3. **API**: OpenWeatherMap (for live weather data retrieval)

### Application Features:
1. **City Selection**: Users can choose a city from a predefined list or add new cities dynamically.
2. **Weather Data Fetching**: Retrieves weather attributes like climate, description, temperature, and pressure.
3. **Data Persistence**:
   - Saves weather data to a text file (`weather_data.txt`).
   - Generates a user-friendly HTML report (`weather_data.html`).

### Implementation Workflow:
1. **GUI Design**: 
   - Built with Tkinter widgets such as labels, entry fields, buttons, and dropdown menus.
2. **Data Fetching**: 
   - Uses the OpenWeatherMap API to retrieve JSON responses for weather details.
3. **File Handling**:
   - Writes data to files for persistence and easy access.
4. **Error Handling**:
   - Ensures graceful handling of invalid inputs or API issues.

## Results
1. **Graphical User Interface (GUI)**:
   - A functional and interactive interface for selecting cities and displaying weather data.
2. **Output Files**:
   - `weather_data.txt`: A text file with weather details for the selected city.
   - `weather_data.html`: A styled HTML file presenting the same data in a readable format.

## Future Enhancements
1. **Enhanced Visualization**: Include charts or graphs to represent temperature trends.
2. **Expanded Features**:
   - Add support for forecasts (e.g., 7-day weather predictions).
   - Provide additional weather details like humidity and wind speed.
3. **Mobile Application**: Extend the functionality to a mobile platform for broader accessibility.

## Conclusion
This application successfully demonstrates the integration of a Python-based GUI with a live weather data API. 
It provides a functional platform for users to access and store weather information conveniently. 
Future enhancements can further elevate its usability and appeal.
